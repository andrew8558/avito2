// Code generated by MockGen. DO NOT EDIT.
// Source: ./repository.go

// Package mock_repository is a generated GoMock package.
package mock_repository

import (
	model "avito2/internal/model"
	context "context"
	reflect "reflect"
	time "time"

	gomock "github.com/golang/mock/gomock"
	uuid "github.com/google/uuid"
	v4 "github.com/jackc/pgx/v4"
)

// MockRepository is a mock of Repository interface.
type MockRepository struct {
	ctrl     *gomock.Controller
	recorder *MockRepositoryMockRecorder
}

// MockRepositoryMockRecorder is the mock recorder for MockRepository.
type MockRepositoryMockRecorder struct {
	mock *MockRepository
}

// NewMockRepository creates a new mock instance.
func NewMockRepository(ctrl *gomock.Controller) *MockRepository {
	mock := &MockRepository{ctrl: ctrl}
	mock.recorder = &MockRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRepository) EXPECT() *MockRepositoryMockRecorder {
	return m.recorder
}

// AddProduct mocks base method.
func (m *MockRepository) AddProduct(ctx context.Context, tx v4.Tx, receptionId uuid.UUID, productType model.ProductType) (*model.Product, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddProduct", ctx, tx, receptionId, productType)
	ret0, _ := ret[0].(*model.Product)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddProduct indicates an expected call of AddProduct.
func (mr *MockRepositoryMockRecorder) AddProduct(ctx, tx, receptionId, productType interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddProduct", reflect.TypeOf((*MockRepository)(nil).AddProduct), ctx, tx, receptionId, productType)
}

// BeginTransaction mocks base method.
func (m *MockRepository) BeginTransaction(ctx context.Context, options *v4.TxOptions) (v4.Tx, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BeginTransaction", ctx, options)
	ret0, _ := ret[0].(v4.Tx)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// BeginTransaction indicates an expected call of BeginTransaction.
func (mr *MockRepositoryMockRecorder) BeginTransaction(ctx, options interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BeginTransaction", reflect.TypeOf((*MockRepository)(nil).BeginTransaction), ctx, options)
}

// CommitTx mocks base method.
func (m *MockRepository) CommitTx(ctx context.Context, tx v4.Tx) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "CommitTx", ctx, tx)
}

// CommitTx indicates an expected call of CommitTx.
func (mr *MockRepositoryMockRecorder) CommitTx(ctx, tx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CommitTx", reflect.TypeOf((*MockRepository)(nil).CommitTx), ctx, tx)
}

// CreatePvz mocks base method.
func (m *MockRepository) CreatePvz(ctx context.Context, city model.City) (*model.Pvz, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreatePvz", ctx, city)
	ret0, _ := ret[0].(*model.Pvz)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreatePvz indicates an expected call of CreatePvz.
func (mr *MockRepositoryMockRecorder) CreatePvz(ctx, city interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreatePvz", reflect.TypeOf((*MockRepository)(nil).CreatePvz), ctx, city)
}

// CreateReception mocks base method.
func (m *MockRepository) CreateReception(ctx context.Context, tx v4.Tx, pvzId uuid.UUID) (*model.Reception, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateReception", ctx, tx, pvzId)
	ret0, _ := ret[0].(*model.Reception)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateReception indicates an expected call of CreateReception.
func (mr *MockRepositoryMockRecorder) CreateReception(ctx, tx, pvzId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateReception", reflect.TypeOf((*MockRepository)(nil).CreateReception), ctx, tx, pvzId)
}

// DeleteLastProduct mocks base method.
func (m *MockRepository) DeleteLastProduct(ctx context.Context, tx v4.Tx, receptionId uuid.UUID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteLastProduct", ctx, tx, receptionId)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteLastProduct indicates an expected call of DeleteLastProduct.
func (mr *MockRepositoryMockRecorder) DeleteLastProduct(ctx, tx, receptionId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteLastProduct", reflect.TypeOf((*MockRepository)(nil).DeleteLastProduct), ctx, tx, receptionId)
}

// GetCurrentReception mocks base method.
func (m *MockRepository) GetCurrentReception(ctx context.Context, tx v4.Tx, pvzId uuid.UUID) (*model.Reception, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCurrentReception", ctx, tx, pvzId)
	ret0, _ := ret[0].(*model.Reception)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCurrentReception indicates an expected call of GetCurrentReception.
func (mr *MockRepositoryMockRecorder) GetCurrentReception(ctx, tx, pvzId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCurrentReception", reflect.TypeOf((*MockRepository)(nil).GetCurrentReception), ctx, tx, pvzId)
}

// GetProductsInReception mocks base method.
func (m *MockRepository) GetProductsInReception(ctx context.Context, tx v4.Tx, receptionId uuid.UUID) ([]model.Product, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetProductsInReception", ctx, tx, receptionId)
	ret0, _ := ret[0].([]model.Product)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetProductsInReception indicates an expected call of GetProductsInReception.
func (mr *MockRepositoryMockRecorder) GetProductsInReception(ctx, tx, receptionId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetProductsInReception", reflect.TypeOf((*MockRepository)(nil).GetProductsInReception), ctx, tx, receptionId)
}

// GetPvz mocks base method.
func (m *MockRepository) GetPvz(ctx context.Context, tx v4.Tx, pvzId uuid.UUID) (*model.Pvz, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPvz", ctx, tx, pvzId)
	ret0, _ := ret[0].(*model.Pvz)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPvz indicates an expected call of GetPvz.
func (mr *MockRepositoryMockRecorder) GetPvz(ctx, tx, pvzId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPvz", reflect.TypeOf((*MockRepository)(nil).GetPvz), ctx, tx, pvzId)
}

// GetReceptionsForPeriod mocks base method.
func (m *MockRepository) GetReceptionsForPeriod(ctx context.Context, tx v4.Tx, startDate, endDate time.Time, offset, limit int32) ([]model.Reception, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetReceptionsForPeriod", ctx, tx, startDate, endDate, offset, limit)
	ret0, _ := ret[0].([]model.Reception)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetReceptionsForPeriod indicates an expected call of GetReceptionsForPeriod.
func (mr *MockRepositoryMockRecorder) GetReceptionsForPeriod(ctx, tx, startDate, endDate, offset, limit interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetReceptionsForPeriod", reflect.TypeOf((*MockRepository)(nil).GetReceptionsForPeriod), ctx, tx, startDate, endDate, offset, limit)
}

// RollbackTx mocks base method.
func (m *MockRepository) RollbackTx(ctx context.Context, tx v4.Tx) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "RollbackTx", ctx, tx)
}

// RollbackTx indicates an expected call of RollbackTx.
func (mr *MockRepositoryMockRecorder) RollbackTx(ctx, tx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RollbackTx", reflect.TypeOf((*MockRepository)(nil).RollbackTx), ctx, tx)
}

// UpdateLastReceptionStatus mocks base method.
func (m *MockRepository) UpdateLastReceptionStatus(ctx context.Context, tx v4.Tx, pvzId uuid.UUID) (*model.Reception, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateLastReceptionStatus", ctx, tx, pvzId)
	ret0, _ := ret[0].(*model.Reception)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateLastReceptionStatus indicates an expected call of UpdateLastReceptionStatus.
func (mr *MockRepositoryMockRecorder) UpdateLastReceptionStatus(ctx, tx, pvzId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateLastReceptionStatus", reflect.TypeOf((*MockRepository)(nil).UpdateLastReceptionStatus), ctx, tx, pvzId)
}
